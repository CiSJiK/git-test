tracked, untracked = 깃에 파일 추적 온 오프 -> tracked 상태이면 깃에 저장, untracked 이면 깃에 저장 X
stage, unstage = 수정 여부 확인. stage = 수정 없고 이미 최신. unstage = 수정이 있으며 깃보다 최신임.
위는 modified와 밀접한 관련이 있다 생각됨. modified는 수정된 상태이며 unstage 상태가 됨.
commit = 보고서 제출과 같은 역할. 변화 되었음 혹은 변경점이 있음을 기록할 때 사용.
등록은 add로. 트래킹 해제는 rm 으로(rm --cached 입력시 삭제도 같이 됨).
다만 커밋을 한번이라도 했으면 reset으로 헤드를 옮겨줘야함.
git mv 사용시 위치가 변경되면 다시 커밋. 이름 변경은 mv와 똑같이 트래킹 + 이름변경이 처리됨. 이후 커밋.
커밋시 최신 값으로 헤드가 옮겨짐. 원하는 커밋 시점을 확인하려면 헤드 포인터를 좌우로 옮겨야 함.(자료구조 중 하나: 이전 포인터가 추가된 스택)
깃은 스냅샷 방식 사용. 수정된 내역만 일일이 저장하면서 변화전 값을 확인함.
커밋은 -a 명령을 통해 파일 add와 더불어 -m으로 설명을 추가할 수 있음. 둘다 간단한 작업시에만 사용하니 되도록이면 따로따로 해볼것.
단순히 수정한 내역만 있을 경우 git add --update로 처리 가능. 
checkout 이전 내용으로 변경. 
commit --allow-empty-meesage : 빈 커밋 작성 허용.
커밋 로그 확인시 --pretty=short사용 -> 커밋 메시지 한줄만 표기. 그닥 의미 있는건아님.
커밋ID는 SHA1 알고리즘으로 표기되며 git show <ID>로 확인 가능.

git log <파일> 특정 파일 로그만 확인. diff <파일>은 스테이지 상태와 언스테이지 상태의 파일을 비교해줌. diff head는 마지막 커밋과 비교해줌. commit -v 사용시 diff 내역을 커밋 메시지에 추가함.
